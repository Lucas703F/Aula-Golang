// Arquivo principal do programa (entrypoint) ü´°
// Conven√ß√£o de mercado: colocar em cmd/<nome-app>/main.go
package main

// Importa os pacotes necess√°rios
import (
	"fmt"
	"os"

	"github.com/seu-usuario/meu-projeto-go/internal/fibonacci"
	"github.com/seu-usuario/meu-projeto-go/internal/hello"
)

// Fun√ß√£o principal do programa
func main() {
	// Mensagem inicial da aplica√ß√£o
	fmt.Println("üöÄ Meu primeiro projeto em Go com estrutura de mercado!")
	hello.SayHello()

	var valorEntrada int
	fmt.Print("\n\nEscolha um valor para calcular: ")
	fmt.Fscan(os.Stdin, &valorEntrada)
	result := fibonacci.Fibonacci(valorEntrada)
	fmt.Printf("O resultado do Fibonacci(%v) √©: %v\n", valorEntrada, result)

	nome := "Lucas"

	switch nome {
	case "Lucas":
		fmt.Println("\nLucas Felipe de Ara√∫jo Ferreira")
	default:
		fmt.Println("Nome n√£o encontrado!")
	}

	// Fun√ß√£o an√¥nima atribu√≠da a uma vari√°vel
	funcaoAnonima := func() {
		fmt.Println("Ol√°! Esta √© uma fun√ß√£o an√¥nima.")
	}

	// Executando a fun√ß√£o an√¥nima
	funcaoAnonima()

	// Chamar a fun√ß√£o IMC para rodar o c√°lculo
	IMC()

}

func calcularIMC(peso, altura float64) float64 {
	return peso / (altura * altura)
}

func IMC() {
	var nomeImc string
	var idade int
	var peso, altura float64

	// Entrada dos dados
	fmt.Print("\nDigite seu nome: ")
	fmt.Scanln(&nomeImc)

	fmt.Print("\nDigite sua idade: ")
	fmt.Scanln(&idade)

	fmt.Print("\nDigite seu peso (kg): ")
	fmt.Scanln(&peso)

	fmt.Print("\nDigite sua altura (em metros, ex: 1.75): ")
	fmt.Scanln(&altura)

	// C√°lculo do IMC
	imc := calcularIMC(peso, altura)

	// Exibi√ß√£o do resultado
	fmt.Printf("\n%s, %d anos\n", nomeImc, idade)
	fmt.Printf("Seu IMC √©: %.2f\n", imc)

	// Avalia√ß√£o do IMC com switch
	switch {
	case imc < 18.5:
		fmt.Println("Classifica√ß√£o: Abaixo do peso")
	case imc >= 18.5 && imc < 24.9:
		fmt.Println("Classifica√ß√£o: Peso ideal")
	case imc >= 25:
		fmt.Println("Classifica√ß√£o: Acima do peso")
	default:
		fmt.Println("Classifica√ß√£o: Indefinida")
	}
}
